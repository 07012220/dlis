<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0050)http://w3.energistics.org/rp66/v1/rp66v1_defs.html -->
<HTML><HEAD><META content="IE=5.0000" http-equiv="X-UA-Compatible">
 <TITLE>Definitions</TITLE> 
<META http-equiv="Content-Type" content="text/html; charset=windows-1251">
<META name="GENERATOR" content="MSHTML 11.00.9600.18894"></HEAD> 
<BODY>
<H2>Definitions</H2>
<DL>
  <DT><A name="Absent Value"><B>Absent Value</B></A>   
  <DD>The Value of an Attribute is an <I>Absent Value</I>  and is undefined when 
  the Attribute Count is zero.  A Channel Sample Value is an Absent Value and is 
  undefined when its Dimension Count is zero.  Under DLIS, Absent Values are 
  explicitly absent and are not represented by specially-designated numeric 
  quantities.   
  <DT><A name="Angular Drift"><B>Angular Drift</B></A>   
  <DD>One of the coordinates of the spatial coordinate system of a well.  The 
  <I>Angular Drift</I> is the angle measured eastwardly (clockwise when viewed 
  from above) about the Vertical Generatrix from North.   
  <DT><A name="Attribute"><B>Attribute</B></A>   
  <DD>One of possibly many specific named items of information or data 
  associated with an Object.  An Attribute is similar in function to a column 
  value of a row in a table or to a field of a record in a database relation.  
  Its information content can be more general, however.   
  <DT><A name="Body"><B>Body</B> (Refer to Logical Record Body, Logical Record 
  Segment Body)  </A>
  <DT><A name="Borehole Depth"><B>Borehole Depth</B></A>   
  <DD>One of the coordinates of the spatial coordinate system of a well.  The 
  Borehole Depth is the distance measured along the borehole from the Well 
  Reference Point.  Borehole Depth is zero at the Well Reference Point and is 
  positive below it.   
  <DT><A name="Channel"><B>Channel</B></A>   
  <DD>A measured or computed quantity that occurs as a sequence of samples 
  indexed against time, depth, or some other physical dimension of a well.  Also 
  a Set Type.   
  <DT><A name="Characteristic"><B>Characteristic</B></A>   
  <DD>A descriptive feature of a Set, an Object, or an Attribute.  The 
  Characteristics of a Set are its Name and Type, of an Object its Name, and of 
  an Attribute its Label, Count, Representation Code, Units, and Value.   
  <DT><A name="Checksum"><B>Checksum</B></A>   
  <DD>The integer result of a 16-bit cyclic redundancy computation on the the 
  bytes of a Logical Record Segment, excluding the Checksum result itself and 
  any bytes (e.g., the Logical Record Segment Trailing Length) that follow it.  
  The Checksum is used to verify possible physical recording errors in the 
  Logical Record Segment.   
  <DT><A name="Company Code"><B>Company Code</B></A>   
  <DD>A numeric code assigned to a company that writes information under the 
  DLIS format.  Each company (or major division) is assigned a unique <I>Company 
  Code</I> by the API.   
  <DT><A name="Component"><B>Component</B></A>   
  <DD>The basic syntactic unit of an Explicitly Formatted Logical Record (EFLR). 
   A Component consists of a Component Descriptor (one byte), followed by zero 
  or more fields that contain Characteristics associated with a Set, Object, or 
  Attribute.   
  <DT><A name="Component Descriptor"><B>Component Descriptor</B></A>   
  <DD>The first byte of a Component.  It has a Role field (bits 1-3), which 
  specifies whether the Component describes a Set, Object, or Attribute, and a 
  Format field (bits 4-8), which indicate which Characteristics of the thing 
  described are present in the remainder of the Component.   
  <DT><A name="Component Format"><B>Component Format</B> (Refer to Component 
  Descriptor) </A>   
  <DD>
  <DT><A name="Component Role"><B>Component Role</B> (Refer to Component 
  Descriptor) </A>   
  <DD>
  <DT><A name="Compound Representation Code"><B>Compound Representation 
  Code</B></A>   
  <DD>A Representation Code that is defined in terms of other simpler 
  Representation Codes.   
  <DT><A name="Consumer"><B>Consumer</B></A>   
  <DD>The system or application program or company that reads information 
  recorded under the DLIS Logical format.  The Consumer reads what the Producer 
  writes.   
  <DT><A name="Copy Number"><B>Copy Number</B></A>   
  <DD>A number, having meaning only within the context of a Logical File, that 
  is used to distinguish two Objects of the same Type that have the same 
  Identifier and Origin.  The Name of an Object consists of an Origin, a Copy 
  Number, and an Identifier.   
  <DT><A name="Count"><B>Count</B></A>   
  <DD>One of the five Characteristics of an Attribute.  The Count specifies how 
  many Elements are in the Value of the Attribute.  When the Count is zero, the 
  Attribute has an Absent Value.   
  <DT><A name="Data Descriptor Reference"><B>Data Descriptor Reference</B></A>   
  <DD>The first field of an Indirectly Formatted Logical Record (IFLR).  The 
  Data Descriptor Reference is the Name of an Object that identifies and 
  describes a sequence of IFLRs.  Each IFLR Type is associated with a specific 
  Set Type to which such Objects belong.   
  <DT><A name="Defining Origin"><B>Defining Origin</B></A>   
  <DD>The first Origin Object in a Logical File.  The Defining Origin describes 
  the environment under which the Logical File was created.   
  <DT><A name="Descriptor"><B>Descriptor</B> (Refer to Component Descriptor) 
  </A>   
  <DD>
  <DT><A name="Dictionary"><B>Dictionary</B></A>   
  <DD>A Dictionary is a database in which Identifiers used under DLIS are 
  administered.  The standard does not specify the mechanisms for designing, 
  creating, or managing Dictionaries.  However, it does specify for which Set 
  Types Identifiers should be managed.  The statement, “Names of Set Type X are 
  dictionary-controlled” means that Identifiers for such Objects have a 
  persistent meaning in all Logical Files in which they occur (by a given 
  Producer).  Identifiers of Objects for Set Types that are not 
  dictionary-controlled are considered void of meaning and are expected to be 
  computer-generated.   
  <DT><A name="Dimension"><B>Dimension</B></A>   
  <DD>This is a vector of integers which describe the form and size of a 
  rectangular array that is represented elsewhere, for example as a Channel 
  Sample.  The first integer specifies the number of remaining integers and the 
  dimensionality of the array (i.e., 1-d, 2-d, etc.).  The remaining integers 
  specify the number of elements along each dimension (or coordinate) of the 
  array.  The Dimension of an array is typically contained in the Dimension 
  Attribute of some Object that is associated with the array.   
  <DT><A name="Element"><B>Element</B></A>   
  <DD>One of a vector of homogeneous quantities that make up the Value of an 
  Attribute or of a Channel Sample.  A Value or Sample may consist of one or 
  more Elements.  All Elements have the same Representation Code and Units.  The 
  number of Elements of an Attribute Value is specified by the Attribute Count.  
  The number of Elements of a Channel Sample is specified by its associated 
  Dimension.   
  <DT><A name="Encryption Packet"><B>Encryption Packet</B></A>   
  <DD>An optional sequence of bytes that follows the Logical Record Segment 
  Header and precedes the Logical Record Segment Body and that contains 
  information used to decrypt the Logical Record.  The first two bytes of the 
  Encryption Packet specify its length, and the next two bytes specify the 
  Producer’s Company Code.  The remaining bytes are meaningful only to the 
  Producer.   
  <DT><A name="Explicitly Formatted Logical Record (EFLR)"><B>Explicitly 
  Formatted Logical Record (EFLR)</B></A>   
  <DD>One of two kinds of Logical Record defined under DLIS.  The Body of an 
  EFLR is a sequence of Components that combine to describe a single Set of 
  Objects.  An EFLR is self-describing and can be interpreted without the use or 
  knowledge of any other Logical Records.   
  <DT><A name="Format Version"><B>Format Version</B></A>   
  <DD>A two-byte field immediately following the Visible Record Length in 
  Visible Records on Record Storage Units (e.g., standard 9-track tapes).  This 
  field is used to distinguish DLIS from other formats and to distinguish DLIS 
  Version 1 from later major versions.  The first byte of the Format Version 
  contains the value FF (hex), and the second byte is the major version number 
  of the standard (in the current case, 1).   
  <DT><A name="Frame"><B>Frame</B></A>   
  <DD>The Indirectly Formatted Data of an IFLR of Type FDATA (see Appendix A) is 
  called a <I>Frame</I>.  A Frame is made of a Frame Number, followed by a set 
  of Channel sample values, one sample per Channel, all sampled at the same 
  index value.  One of the Channels may serve as an index.  When this is the 
  case, it is always the first Channel in the Frame.  When there is no Channel 
  index, then the Frame Number serves as an index.   
  <DT><A name="Frame Data"><B>Frame Data</B></A>   
  <DD>Information recorded in Frames is called <I>Frame Data</I>.  This consists 
  of Channel samples, one sample per Channel per Frame.   
  <DT><A name="Frame Number"><B>Frame Number</B></A>   
  <DD>A positive integer recorded at the beginning of each Frame.  The Frame 
  Number is a sequential index of the Frames of the same Frame Type.  Frame n 
  precedes Frame n+1, although other Logical Records may fall between.   
  <DT><A name="Frame Type"><B>Frame Type</B></A>   
  <DD>The Name (Origin, Copy Number, Identifier) of a Frame Object used to group 
  Frames that have the same organization.  This Name is also used as the Data 
  Descriptor Reference in the Frames, and the Frames are known to be of the 
  given <I>Frame Type</I>.  Frames of a given Frame Type all contain samples of 
  the same set of Channels and all in the same order.  The Representation Code 
  and Units used to record a Channel are the same in all Frames of a given Frame 
  Type but may be different in another Frame Type.  A Channel sample may change 
  size (number of Elements)  from Frame to Frame and may even become Absent when 
  its number of Elements reduces to zero.   
  <DT><A name="Header"><B>Header</B> (Refer to Logical Record Segment Header) 
  </A>   
  <DD>
  <DT><A name="Identifier"><B>Identifier</B></A>   
  <DD>That part of an Object Name that is textual.  The <I>Identifier</I> is 
  what commonly distinguishes one Object from another.  Two Objects of the same 
  Type may have the same Identifier, in which case the other Subfields of the 
  Name are used to distinguish the Objects.  Identifiers of certain Types of 
  Objects uniquely identify the type of data represented in the Object, and such 
  Identifiers (typically mnemonic in nature) are dictionary-controlled.   
  <DT><A name="Index Channel"><B>Index Channel</B></A>   
  <DD>The first Channel in a Frame, when the Frame has an <I>Index Channel</I>.  
  A Frame may be indexed by Frame Number only and need not have an Index 
  Channel.  Whether or not a Frame has an Index Channel is specified in the 
  associated Frame Object.  When a Frame has an Index Channel, then all Channel 
  values in the Frame are considered to be sampled at the index indicated by the 
  value of the Index Channel.   
  <DT><A name="Indirectly Formatted Data"><B>Indirectly Formatted Data</B></A>   
  <DD>That part of the Body of an Indirectly Formatted Logical Record (IFLR) 
  that follows the Data Descriptor Reference.   
  <DT><A name="Indirectly Formatted Logical Record (IFLR)"><B>Indirectly 
  Formatted Logical Record (IFLR)</B></A>   
  <DD>One of two kinds of Logical Record defined under DLIS.  The Body of an 
  IFLR consists of a Data Descriptor Reference, followed by an arbitrary number 
  of bytes of Indirectly Formatted Data.  This data is not self-descriptive.  
  Instead, its format is determined from information contained in the Object 
  named by the Data Descriptor Reference and possibly related Objects.  For 
  example, the format of a Frame Data IFLR is specified by a Frame Object and by 
  one or more Channel Objects referenced by the Frame Object.   
  <DT><A name="Invisible Envelope"><B>Invisible Envelope</B></A>   
  <DD>Data recorded on the physical medium and used as a control interface by 
  the processor I/O subsystem, but not visible through normal application 
  read/write requests, for example tape marks on magnetic tape.   
  <DT><A name="Lexicon"><B>Lexicon</B></A>   
  <DD>A list of dictionary-controlled words or phrases applicable as Name Part 
  Values for a particular Name Part Type.  For example, each Producer manages a 
  <I>Lexicon</I> of Entity names and another Lexicon of Quantity names.   
  <DT><A name="Locus"><B>Locus</B></A>   
  <DD>A sequence of distinct points in space and time, each of which has a 
  three-dimensional Position coordinate and a Time coordinate.   
  <DT><A name="Logical File"><B>Logical File</B></A>   
  <DD>A sequence of two or more contiguous Logical Records in a Storage Set that 
  begins with a File Header Logical Record and contains no other File Header 
  Logical Records.  A Logical File must have at least one OLR (Origin) Logical 
  Record immediately following the File Header Logical Record.  A Logical File 
  supports user-level organization of data.   
  <DT><A name="Logical Format"><B>Logical Format</B></A>   
  <DD>The view of DLIS data that is completely independent of any physical 
  mapping.  The DLIS Logical Format consists of a sequence of Logical Records 
  organized into one or more Logical Files.  This format is the same for any 
  physical representation of the data.   
  <DT><A name="Logical Record"><B>Logical Record</B></A>   
  <DD>A sequence of one or more contiguous Logical Record Segments.  A Logical 
  Record supports application-level organization of data.   
  <DT><A name="Logical Record Body"><B>Logical Record Body</B></A>   
  <DD>The sequential concatenation of the Logical Record Segment Bodies from the 
  Logical Record Segments that make up the Logical Record.   
  <DT><A name="Logical Record Segment"><B>Logical Record Segment</B></A>   
  <DD>A sequence of contiguous 8-bit bytes organized to have a Logical Record 
  Segment Header, followed (optionally) by an Encryption Packet, followed by a 
  Logical Record Segment Body, followed (optionally) by a Logical Record Segment 
  Trailer.  Logical Record Segments are used to bind the Logical Format to a 
  physical format.   
  <DT><A name="Logical Record Segment Attributes"><B>Logical Record Segment 
  Attributes</B></A>   
  <DD>Eight bits of binary data that describe the attributes of a Logical Record 
  Segment.   
  <DT><A name="Logical Record Segment Body"><B>Logical Record Segment 
  Body</B></A>   
  <DD>The part of a Logical Record Segment that contains some or all of the data 
  belonging to a Logical Record.  The intersection of a Logical Record and one 
  of its Logical Record Segments is the Logical Record Segment Body.   
  <DT><A name="Logical Record Segment Encryption Packet"><B>Logical Record 
  Segment Encryption Packet</B></A>   
  <DD>An optional packet of information, following the Logical Record Segment 
  Header, that contains encryption/decryption information for the Logical Record 
  Segment.  The <I>Encryption Packet</I> begins with its size in bytes and the 
  Company Code of the Producer.  Any additional data in the Encryption Packet is 
  meaningful only to the Producer’s organization.   
  <DT><A name="Logical Record Segment Header"><B>Logical Record Segment 
  Header</B></A>   
  <DD>The first part of a Logical Record Segment.  It contains the Logical 
  Record Segment Length, the Logical Record Segment Attributes, and the Logical 
  Record Type.   
  <DT><A name="Logical Record Segment Length"><B>Logical Record Segment 
  Length</B></A>   
  <DD>A two-byte unsigned integer that specifies the combined length of all 
  parts of the Logical Record Segment.   
  <DT><A name="Logical Record Segment Trailer"><B>Logical Record Segment 
  Trailer</B></A>   
  <DD>The last part of a Logical Record Segment.  It contains three fields, all 
  of which are optional: the Padding, the Checksum, and the Logical Record 
  Segment Trailing Length.   
  <DT><A name="Logical Record Structure"><B>Logical Record Structure</B></A>   
  <DD>One of the attributes specified in the Logical Record Segment Attributes.  
  It specifies whether the Logical Record is an EFLR or an IFLR.   
  <DT><A name="Logical Record Type"><B>Logical Record Type</B></A>   
  <DD>A one-byte unsigned integer that indicates the general semantic content of 
  the Logical Record.   
  <DT><A name="Long Name"><B>Long Name</B></A>   
  <DD>A structured textual description that provides an understanding, to 
  humans, of the named item, with enough detail to distinguish it from similar 
  items that have different meanings.  It is not a unique identifier.  A Long 
  Name is represented in a Long-Name Object.   
  <DT><A name="Maximum Visible Record Length"><B>Maximum Visible Record 
  Length</B></A>   
  <DD>The maximum permitted length of a Visible on a Record Storage Unit.  Its 
  current value is 16,384 bytes.   
  <DT><A name="Minimum Visible Record Length"><B>Minimum Visible Record 
  Length</B></A>   
  <DD>The minimum permitted length of a Visible Record on a Record Storage Unit. 
   Its current value is 20 bytes, which is based on the minimum Logical Record 
  Segment Length (16 bytes) plus the Visible Record Length (2 bytes) and the 
  Format Version (2 bytes).   
  <DT><A name="Name"><B>Name</B></A>   
  <DD>Used to refer to the Name Characteristic of a Set, Object, or Attribute.  
  The Name of a Set or Attribute is a character string (Representation Code 
  IDENT).  The Name of an Object is an aggregate consisting of an integer 
  Origin, an integer Copy Number, and a character Identifier.   
  <DT><A name="Name Part Type"><B>Name Part Type</B></A>   
  <DD>A classification of the words or phrases that apply to a particular part 
  of the Long Name structure, for example Entity or Quantity.   
  <DT><A name="Name Part Value"><B>Name Part Value</B></A>   
  <DD>A word or phrase that applies to a particular part (Name Part Type) of a 
  Long Name structure.  For example, “Density” and “Porosity” are <I>Name Part 
  Values</I> that apply to the Name Part Type “Quantity”.   
  <DT><A name="Object Component"><B>Object Component</B></A>   
  <DD>An Object Component indicates the beginning of a new Object in a Set and 
  is followed by zero or more Attribute Components.  The Attributes of an Object 
  that has no Attribute Components are completely specified in the Template.  
  The Object Component contains a single Characteristic, the Object Name, which 
  is mandatory.   
  <DT><A name="Object"><B>Object</B></A>   
  <DD>A data entity that has a Name and a number of Attributes.  An Object is 
  like a row in a table of information.  Its Attributes are like the column 
  values in the row.  Objects are recorded in EFLRs.   
  <DT><A name="Origin"><B>Origin</B></A>   
  <DD>As an Object in a Logical File, an <I>Origin</I> contains information 
  describing the original circumstances under which that or another Logical File 
  was created.  Only one Origin Object in a Logical File, namely the first one, 
  describes that Logical File.  Additional Origin Objects describe other Logical 
  Files from which data has been copied.  Other Objects in a Logical File are 
  keyed to their appropriate Origin Object by means of an integer Subfield in 
  their Names, namely the Origin Subfield.  This integer value matches the 
  Origin Subfield of the appropriate Origin Object.  This integer value is also 
  commonly referred to as the Object’s Origin.   
  <DT><A name="Pad Bytes"><B>Pad Bytes</B></A>   
  <DD><I>Pad Bytes</I> are part of the Logical Record Segment Trailer and are 
  used to alter the size of a Logical Record Segment to satisfy minimum size 
  requirements or more commonly to make the Logical Record Segment Length 
  divisible by some integer.  In all cases, the Logical Record Segment Length 
  must be divisible by two.  Additionally, certain encryption methods may 
  require the length of the Logical Record Segment Body plus the Pad Bytes to be 
  divisible by some other factor.   
  <DT><A name="Pad Count"><B>Pad Count</B></A>   
  <DD>This is the first byte of the Pad Bytes and indicates how many Pad Bytes 
  there are.  The maximum number of Pad Bytes may therefore not exceed 255.   
  <DT><A name="Padding"><B>Padding</B></A>   
  <DD>An informal reference to Pad Bytes.   
  <DT><A name="Parent File"><B>Parent File</B></A>   
  <DD>The Logical File in which data are originally created.  Some data in a 
  Logical File may have been copied from other Logical Files.   
  <DT><A name="Path"><B>Path</B></A>   
  <DD>A sequence of space-time coordinates, where space is typically represented 
  by depth, radial distance from a vertical line, and angular displacement about 
  the same vertical line.  The vertical line used is the one that goes through a 
  well’s Well Reference Point, a point used to identify the location of a well.  
  A Path may be represented by a combination of Channels, each of which 
  represents one of the above-mentioned coordinates.   
  <DT><A name="Physical Format"><B>Physical Format</B></A>   
  <DD>The way in which recorded data is located and organized on a particular 
  physical medium such as a magnetic tape or disk file.  With some I/O systems 
  more than one organization and view of data is supported on the same medium.  
  Each such view corresponds to a different <I>physical format</I>.  For 
  example, disk files may be viewed as having variable-length record structures, 
  block structures, byte stream structures, etc., depending on the I/O facility 
  that is used.  The physical format determines the way in which Logical Record 
  Segments are used but generally has no effect on Logical Records.   
  <DT><A name="Predecessor"><B>Predecessor</B></A>   
  <DD>Used to indicate the relation between successive Logical Record Segments.  
  If two Logical Record Segments belong to the same Logical Record, then one of 
  them — the one that comes first — is a <I>Predecessor</I> of the other.  The 
  first Logical Record Segment of a Logical Record has no Predecessor.   
  <DT><A name="Private"><B>Private</B></A>   
  <DD>A Logical Record with Type &#8805; 128 is said to be <I>Private</I>.  In 
  particular, the semantic content of such a Logical Record is decided upon 
  solely by the Producer and not via any public standardization process.  
  Private Logical Records are available to consumers in general, unless 
  encrypted.  The fact that a Logical Record is Private does not imply that it 
  is also encrypted.   
  <DT><A name="Producer"><B>Producer</B></A>   
  <DD>The system or application program or company that records information 
  under the DLIS Logical Format.  The Producer writes what the Consumer reads.   
  <DT><A name="Public"><B>Public</B></A>   
  <DD>A Logical Record with Type &lt; 128 is said to be <I>Public</I>.  In 
  particular, the semantic content of such a Logical Record is agreed to by the 
  all users via a standardization process administered by the API.  Such Logical 
  Records may not be used except in accordance with the standard definition.  
  Public Logical Records may be encrypted or not, according to the needs of the 
  Producer.   
  <DT><A name="Radial Drift"><B>Radial Drift</B></A>   
  <DD><I>Radial Drift</I> is the perpendicular distance of a point from a 
  vertical line that passes through the Well Reference Point of a well.   
  <DT><A name="Record Structure"><B>Record Structure</B></A>   
  <DD>One of possibly many different physical formats.  A Storage Unit is said 
  to have <I>Record Stucture</I> if data is written and read in sequential, 
  variable-length records.  For all Record Structure Storage Units each record 
  must begin with a two-byte unsigned integer Visible Record Length, followed by 
  a two-byte Format Version, followed by an integer number of Logical Record 
  Segments.  Other requirements, for example use of Tape Marks, depend on the 
  particular physical medium.   
  <DT><A name="Representation Code"><B>Representation Code</B></A>   
  <DD>Each distinct piece of information in the Logical Format has a 
  well-defined representation that extends across one or more bytes.  Each 
  different representation is identified by a one-byte <I>Representation 
  Code</I>.  Representation Codes are defined in Appendix B and identify the 
  various floating point, integer, and text representations permitted under the 
  DLIS.   
  <DT><A name="Sample (of a Channel)"><B>Sample (of a Channel)</B></A>   
  <DD>A Channel <I>Sample</I> is one of a sequence of evaluations of a Channel.  
  A Channel Sample may be a scalar sensor reading (i.e., a single number), or it 
  may be an array representing a waveform or some other multi-dimensional data.  
 
  <DT><A name="Semantics"><B>Semantics</B></A>   
  <DD><I>Semantics</I> is the definition of what data means and how it is used.  
  Whereas syntax provides rules for recording Objects in Sets, semantics defines 
  the Objects that may be recorded, e.g., the File-Header, Origin, Channel, 
  Frame, etc. Objects.   
  <DT><A name="Set Component"><B>Set Component</B></A>   
  <DD>A Set Component indicates the beginning of a Set and is followed by one or 
  more Template Attribute Components.  A Set Component always contains a Type 
  Characteristic and may contain a Name Characteristic.   
  <DT><A name="Set"><B>Set</B></A>   
  <DD>A data entity that has a Type and optionally a Name, and contains a number 
  of Objects.  A Set is like a table of information in which the Objects are the 
  rows of the table.  Each Set is contained in an EFLR (exactly one Set per 
  EFLR), and there may be more than one Set with the same Type in a Logical 
  File.   
  <DT><A name="Set Type"><B>Set Type</B></A>   
  <DD>A textual identifier of the type of Objects contained in a Set.  The 
  Objects in a Set are characterized by the Attributes in the Template of the 
  Set.  The Attributes associated with each given Set Type are specified in the 
  standard.   
  <DT><A name="Slot"><B>Slot</B></A>   
  <DD>One of a fixed number of positions in a Frame for recording a single 
  Channel Sample value.  Channels are assigned to Slots in a Frame in a specific 
  order, and all Slots follow the Frame Number.  The Index Channel, if there is 
  one, is in the first Slot of a Frame.   
  <DT><A name="Splice"><B>Splice</B></A>   
  <DD>A <I>Splice</I> is the result of concatenating two or more instances of a 
  Channel (e.g., from different runs) to obtain a resultant Channel defined over 
  a larger domain or interval.  The information associated with a Splice is 
  represented in a Splice Object.   
  <DT><A name="Static Information"><B>Static Information</B></A>   
  <DD><I>Static Information</I> consists of Objects typically used to describe 
  Channels and Frames, and information about Channels and Frames.  Static 
  Information is typically required by an application prior to the processing of 
  Frames.   
  <DT><A name="Storage Set"><B>Storage Set</B></A>   
  <DD>A group of Storage Units that contain a common DLIS Logical Format (e.g., 
  a sequence of Logical Files) and for which at least two Storage Units are 
  spanned by a single Logical File.   
  <DT><A name="Storage Set Identifier"><B>Storage Set Identifier</B></A>   
  <DD>A 60-character ASCII field in the Storage Unit Label used to identify a 
  Storage Set.   
  <DT><A name="Storage Unit"><B>Storage Unit</B></A>   
  <DD>Something that contains DLIS data and is manageable as a unit at the human 
  level, (e.g., a tape or disk file).   
  <DT><A name="Storage Unit Label"><B>Storage Unit Label</B></A>   
  <DD>The first 80 bytes of the Visible Envelope of a Storage Unit.  The Storage 
  Unit Label consists of five fixed-length ASCII fields used to identify the 
  Storage Unit and the Storage Set of which it is a part.   
  <DT><A name="Storage Unit Sequence Number"><B>Storage Unit Sequence 
  Number</B></A>   
  <DD>A positive integer (its ASCII representation) in the Storage Unit Label 
  that indicates the order in which a Storage Unit occurs in a Storage Set.   
  <DT><A name="Storage Unit Structure"><B>Storage Unit Structure</B></A>   
  <DD>An ASCII keyword in the Storage Unit Label that reflects the Physical 
  Format of the Storage Unit and indicates the binding mechanism between the 
  Physical Format and the DLIS Logical Format.   
  <DT><A name="Subfield"><B>Subfield</B></A>   
  <DD>A part of a datum for which the representation is described by a simple 
  (not compound) Representation Code.  For example, the Subfields of a datum 
  having Representation Code OBNAME are, in order, an integer (UVARI), another 
  integer (USHORT), and a string (IDENT).   
  <DT><A name="Successor"><B>Successor</B></A>   
  <DD>Used to indicate the relation between successive Logical Record Segments.  
  If two Logical Record Segments belong to the same Logical Record, then one of 
  them — the one that comes second — is a <I>Successor</I> of the other.  The 
  last Logical Record Segment of a Logical Record has no Successor.   
  <DT><A name="Syntax"><B>Syntax</B></A>   
  <DD><I>Syntax</I> is the definition of the rules for how to record data but 
  not for what the data means (at the application level) or how it is to be 
  used.  Syntax does convey meaning of data, but at a level below applications.  
  For example, the rules of syntax tell when a Component has a Type 
  Characteristic and how to get it, but syntax provides no information on the 
  meaning or use of the values the Type Characteristic may have.   
  <DT><A name="Template"><B>Template</B></A>   
  <DD>A sequence of Attributes at the beginning of a Set that specify defaults 
  for the Objects in the Set.  Attributes in the Template must have Labels.  
  Objects in the Set have no Attributes other than those identified in the 
  Template.   
  <DT><A name="Tool Zero Point"><B>Tool Zero Point</B></A>   
  <DD>A fixed point on the tool string (usually the bottom of the bottom tool) 
  that stands opposite the Well Reference Point when Borehole Depth is zero.   
  <DT><A name="Trailing Length"><B>Trailing Length</B></A>   
  <DD>The optional last field in the Logical Record Segment Trailer that 
  contains a copy of the Logical Record Segment Length.   
  <DT><A name="Transient Information"><B>Transient Information</B></A>   
  <DD><I>Transient Information</I> consists of Objects that correspond to events 
  that occur during the processing of Frames.  These events can affect Objects 
  in the Static Information or can correspond to messages between the operator 
  and the system.   
  <DT><A name="Unzoned"><B>Unzoned</B></A>   
  <DD>A Parameter or Computation Object is said to be <I>Unzoned</I> when it has 
  the same value everywhere.  This is the case when the Zones Attribute of the 
  Object is absent.   
  <DT><A name="Update"><B>Update</B></A>   
  <DD>An <I>Update</I> is a change made to data represented by an Object (e.g., 
  a Parameter) previously recorded in a Logical File.  The change and 
  information related to the change are represented in an Update Object recorded 
  in the same Logical File.   
  <DT><A name="Value (of an Attribute)"><B>Value (of an Attribute)</B></A>   
  <DD>The <I>Value</I> of an Attribute is the data contained in its Value 
  Characteristic.  A Value may consist of one or more Elements, each of which 
  has the same Units and Representation Code.   
  <DT><A name="Vertical Depth"><B>Vertical Depth</B></A>   
  <DD>Depth measured along the Vertical Generatrix from the Well Reference 
  Point.  Vertical depth increases in a downward direction and is negative above 
  the Well Reference Point.   
  <DT><A name="Vertical Generatrix"><B>Vertical Generatrix</B></A>   
  <DD>A vertical line that passes through the Well Reference Point.   
  <DT><A name="Visible Envelope"><B>Visible Envelope</B></A>   
  <DD>Information on a Storage Unit that is provided to applications as normal 
  data by the processor’s I/O subsystem, but which is not part of the DLIS 
  Logical Format.  Information in the <I>Visible Envelope</I> includes the 
  Storage Unit Label.  Other information in the Visible Envelope may be used to 
  define or enhance the binding of Logical Record Segments to the Physical 
  Format.   
  <DT><A name="Visible Record"><B>Visible Record</B></A>   
  <DD>A <I>Visible Record</I> is a term that applies to Record Structure Storage 
  Units.  It consists of all the data bytes accessed by means of a record read 
  operation from the system-specific file access subsystem.   
  <DT><A name="Visible Record Length"><B>Visible Record Length</B></A>   
  <DD>When DLIS information is recorded in variable length pysical records, each 
  Visible Record begins with a two-byte unsigned integer length of the Visible 
  Record called the <I>Visible Record Length</I>.  This length is considered to 
  be external the DLIS Logical Format.   
  <DT><A name="Well Reference Point"><B>Well Reference Point</B></A>   
  <DD>A unique point that is the origin of a well’s spatial coordinate system 
  for information in a Logical File.  This point is defined relative to some 
  permanent vertical structure, such as ground level or mean sea level, and to 
  three independent geographical coordinates, which typically include Latitude 
  and Longitude.  The same well may have different Well Reference Points in 
  different Logical Files.   
  <DT><A name="Zone"><B>Zone</B></A>   
  <DD>A <I>Zone</I> is a single interval in depth or time.  The depth coordinate 
  may be either Vertical Depth or Borehole Depth.   
  <DT><A name="Zoned"><B>Zoned</B></A>   
  <DD>A Parameter or Computation Object is said to be <I>Zoned</I> when it has 
  different values in different intervals along a depth or time domain or is 
  undefined in some interval of a depth or time domain.  This is the case when 
  the Zones Attribute of the Object is <U>not</U> absent. </DD></DL></BODY></HTML>
